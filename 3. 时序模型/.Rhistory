# 安装和加载必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
# 读取数据
stock_data <- read.csv("stock_data.csv", stringsAsFactors = FALSE)
# 安装和加载必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
# 读取数据
stock_data <- read.csv("stock.csv", stringsAsFactors = FALSE)
# 数据预处理
stock_data$Date <- as.Date(stock_data$Date, format="%m/%d/%Y")
stock_data$Close.Last <- as.numeric(gsub("\\$", "", stock_data$Close.Last))
stock_data$Open <- as.numeric(gsub("\\$", "", stock_data$Open))
stock_data$High <- as.numeric(gsub("\\$", "", stock_data$High))
stock_data$Low <- as.numeric(gsub("\\$", "", stock_data$Low))
# 可视化AAPL股价随时间的变化
ggplot(stock_data %>% filter(Company == "AAPL"), aes(x=Date, y=Close.Last)) +
geom_line() +
labs(title = "AAPL Stock Price Over Time", x = "Date", y = "Close Price")
# 相关性分析
# 转换数据结构以方便计算相关性
stock_data_wide <- stock_data %>%
select(Date, Company, Close.Last) %>%
spread(key = Company, value = Close.Last)
# 安装和加载必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
# 读取数据
stock_data <- read.csv("stock.csv", stringsAsFactors = FALSE)
# 数据预处理
stock_data$Date <- as.Date(stock_data$Date, format="%m/%d/%Y")
stock_data$Close.Last <- as.numeric(gsub("\\$", "", stock_data$Close.Last))
stock_data$Open <- as.numeric(gsub("\\$", "", stock_data$Open))
stock_data$High <- as.numeric(gsub("\\$", "", stock_data$High))
stock_data$Low <- as.numeric(gsub("\\$", "", stock_data$Low))
# 确保每个公司每天只有一个数据点
# 如果有多个数据点，则取平均值
stock_data <- stock_data %>%
group_by(Date, Company) %>%
summarise(Close.Last = mean(Close.Last, na.rm = TRUE))
# 可视化AAPL股价随时间的变化
ggplot(stock_data %>% filter(Company == "AAPL"), aes(x=Date, y=Close.Last)) +
geom_line() +
labs(title = "AAPL Stock Price Over Time", x = "Date", y = "Close Price")
# 为相关性分析准备数据
stock_data_wide <- stock_data %>%
select(Date, Company, Close.Last) %>%
spread(key = Company, value = Close.Last)
# 计算相关性
corr_matrix <- cor(stock_data_wide[, -1], use="complete.obs")
# 可视化相关性矩阵
heatmap(corr_matrix, main="Stock Price Correlation Between Companies", Colv=NA, Rowv=NA)
# 安装和加载必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
# 读取数据
stock_data <- read.csv("stock.csv", stringsAsFactors = FALSE)
# 数据预处理
stock_data$Date <- as.Date(stock_data$Date, format="%m/%d/%Y")
# 清理并转换股票价格和交易量数据
price_columns <- c("Close.Last", "Open", "High", "Low")
for (col in price_columns) {
stock_data[[col]] <- as.numeric(gsub("\\$", "", stock_data[[col]]))
}
stock_data$Volume <- as.numeric(gsub(",", "", stock_data$Volume))
# 处理缺失值
# 这里的策略是删除任何包含缺失值的行
stock_data <- na.omit(stock_data)
# 处理异常值
# 这需要具体数据的业务知识，例如确定股价和交易量的合理范围
# 示例代码（请根据实际数据调整）:
stock_data <- stock_data %>%
filter(Close.Last > 0, Open > 0, High > 0, Low > 0, Volume > 0)
# 数据去重
stock_data <- distinct(stock_data)
# 为每个公司绘制箱线图（以'Close.Last'为例）
ggplot(stock_data, aes(x = Company, y = Close.Last)) +
geom_boxplot() +
labs(title = "Boxplot of Closing Prices for Each Company", x = "Company", y = "Close/Last Price")
# 为每个公司绘制股价和交易量的散点图
ggplot(stock_data, aes(x = Volume, y = Close.Last, color = Company)) +
geom_point() +
labs(title = "Scatter Plot of Volume vs. Close Price", x = "Volume", y = "Close/Last Price")
# 确保每个公司每天只有一个数据点
# 如果有多个数据点，则取平均值
stock_data <- stock_data %>%
group_by(Date, Company) %>%
summarise(Close.Last = mean(Close.Last, na.rm = TRUE))
# 可视化AAPL股价随时间的变化
ggplot(stock_data %>% filter(Company == "AAPL"), aes(x=Date, y=Close.Last)) +
geom_line() +
labs(title = "AAPL Stock Price Over Time", x = "Date", y = "Close Price")
# 为相关性分析准备数据
stock_data_wide <- stock_data %>%
select(Date, Company, Close.Last) %>%
spread(key = Company, value = Close.Last)
# 计算相关性
corr_matrix <- cor(stock_data_wide[, -1], use="complete.obs")
# 可视化相关性矩阵
heatmap(corr_matrix, main="Stock Price Correlation Between Companies", Colv=NA, Rowv=NA)
# 安装和加载必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
# 读取数据
stock_data <- read.csv("stock.csv", stringsAsFactors = FALSE)
# 数据预处理:统一日期格式
stock_data$Date <- as.Date(stock_data$Date, format="%m/%d/%Y")
# 清理并转换股票价格和交易量数据：把价格符号去掉
price_columns <- c("Close.Last", "Open", "High", "Low")
for (col in price_columns) {
stock_data[[col]] <- as.numeric(gsub("\\$", "", stock_data[[col]]))
}
stock_data$Volume <- as.numeric(gsub(",", "", stock_data$Volume))
# 处理缺失值
# 这里的策略是删除任何包含缺失值的行
stock_data <- na.omit(stock_data)
# 处理异常值：去除负数和0
stock_data <- stock_data %>%
filter(Close.Last > 0, Open > 0, High > 0, Low > 0, Volume > 0)
# 数据去重
stock_data <- distinct(stock_data)
# 为每个公司绘制箱线图（以'Close.Last'为例）
ggplot(stock_data, aes(x = Company, y = Close.Last)) +
geom_boxplot() +
labs(title = "Boxplot of Closing Prices for Each Company", x = "Company", y = "Close/Last Price")
# 为每个公司绘制股价和交易量的散点图
ggplot(stock_data, aes(x = Volume, y = Close.Last, color = Company)) +
geom_point() +
labs(title = "Scatter Plot of Volume vs. Close Price", x = "Volume", y = "Close/Last Price")
# 安装和加载必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
# 读取数据
stock_data <- read.csv("stock.csv", stringsAsFactors = FALSE)
# 数据预处理：统一日期格式
stock_data$Date <- as.Date(stock_data$Date, format="%m/%d/%Y")
# 清理并转换股票价格和交易量数据：将价格变成数据
price_columns <- c("Close.Last", "Open", "High", "Low")
for (col in price_columns) {
stock_data[[col]] <- as.numeric(gsub("\\$", "", stock_data[[col]]))
}
stock_data$Volume <- as.numeric(gsub(",", "", stock_data$Volume))
# 处理缺失值
# 这里的策略是删除任何包含缺失值的行
stock_data <- na.omit(stock_data)
# 处理异常值，保证所有数据都是非负数
stock_data <- stock_data %>%
filter(Close.Last > 0, Open > 0, High > 0, Low > 0, Volume > 0)
# 数据去重
stock_data <- distinct(stock_data)
# 只关心'Company'和'Date'列的重复值
stock_data <- distinct(stock_data, Company, Date, .keep_all = TRUE)
# 为每个公司绘制箱线图（以'Close.Last'为例）
ggplot(stock_data, aes(x = Company, y = Close.Last)) +
geom_boxplot() +
labs(title = "Boxplot of Closing Prices for Each Company", x = "Company", y = "Close/Last Price")
# 为每个公司绘制股价和交易量的散点图
ggplot(stock_data, aes(x = Volume, y = Close.Last, color = Company)) +
geom_point() +
labs(title = "Scatter Plot of Volume vs. Close Price", x = "Volume", y = "Close/Last Price")
# 可视化所有公司股价随时间的变化
ggplot(stock_data, aes(x = Date, y = Close.Last, color = Company)) +
geom_line() +
labs(title = "Stock Price Over Time for All Companies", x = "Date", y = "Close Price") +
theme(legend.position = "bottom")
# 为相关性分析准备数据
stock_data_wide <- stock_data %>%
select(Date, Company, Close.Last) %>%
spread(key = Company, value = Close.Last)
# 计算相关性
corr_matrix <- cor(stock_data_wide[, -1], use="complete.obs")
# 可视化相关性矩阵
heatmap(corr_matrix, main="Stock Price Correlation Between Companies", Colv=NA, Rowv=NA)
# 安装和加载必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
# 读取数据
stock_data <- read.csv("stock.csv", stringsAsFactors = FALSE)
# 数据预处理：统一日期格式
stock_data$Date <- as.Date(stock_data$Date, format="%m/%d/%Y")
# 清理并转换股票价格和交易量数据：将价格变成数据
price_columns <- c("Close.Last", "Open", "High", "Low")
for (col in price_columns) {
stock_data[[col]] <- as.numeric(gsub("\\$", "", stock_data[[col]]))
}
stock_data$Volume <- as.numeric(gsub(",", "", stock_data$Volume))
# 处理缺失值
# 这里的策略是删除任何包含缺失值的行
stock_data <- na.omit(stock_data)
# 处理异常值，保证所有数据都是非负数
stock_data <- stock_data %>%
filter(Close.Last > 0, Open > 0, High > 0, Low > 0, Volume > 0)
# 数据去重
stock_data <- distinct(stock_data)
# 只关心'Company'和'Date'列的重复值
stock_data <- distinct(stock_data, Company, Date, .keep_all = TRUE)
# 为每个公司绘制箱线图（以'Close.Last'为例）
ggplot(stock_data, aes(x = Company, y = Close.Last)) +
geom_boxplot() +
labs(title = "Boxplot of Closing Prices for Each Company", x = "Company", y = "Close/Last Price")
# 为每个公司绘制股价和交易量的散点图
ggplot(stock_data, aes(x = Volume, y = Close.Last, color = Company)) +
geom_point() +
labs(title = "Scatter Plot of Volume vs. Close Price", x = "Volume", y = "Close/Last Price")
# 可视化所有公司股价随时间的变化
ggplot(stock_data, aes(x = Date, y = Close.Last, color = Company)) +
geom_line() +
labs(title = "Stock Price Over Time for All Companies", x = "Date", y = "Close Price") +
theme(legend.position = "bottom")
# 获取公司列表
companies <- unique(stock_data$Company)
library(zoo)
install.packages("zoo")
# 可视化所有公司股价随时间的变化
ggplot(stock_data, aes(x = Date, y = Close.Last, color = Company)) +
geom_line() +
labs(title = "Stock Price Over Time for All Companies", x = "Date", y = "Close Price") +
theme(legend.position = "bottom")
# 获取公司列表
companies <- unique(stock_data$Company)
library(zoo)
# 设置移动平均的窗口大小，例如30天
window_size <- 30
# 为每个公司创建单独的股价图，包括移动平均线
for (company in unique(stock_data$Company)) {
company_data <- filter(stock_data, Company == company)
# 计算移动平均
company_data$MA <- rollmean(company_data$Close.Last, window_size, align = "right", fill = NA)
# 绘制股价图和移动平均线
p <- ggplot(company_data, aes(x = Date)) +
geom_line(aes(y = Close.Last), color = "blue") +
geom_line(aes(y = MA), color = "red", na.rm = TRUE) +
labs(title = paste(company, "Stock Price with Moving Average"), x = "Date", y = "Close Price") +
theme(legend.position = "bottom")
print(p)
}
# 为相关性分析准备数据
stock_data_wide <- stock_data %>%
select(Date, Company, Close.Last) %>%
spread(key = Company, value = Close.Last)
# 计算相关性
corr_matrix <- cor(stock_data_wide[, -1], use="complete.obs")
# 可视化相关性矩阵
heatmap(corr_matrix, main="Stock Price Correlation Between Companies", Colv=NA, Rowv=NA)
# 为相关性分析准备数据
stock_data_wide <- stock_data %>%
select(Date, Company, Close.Last) %>%
spread(key = Company, value = Close.Last)
# 计算相关性
corr_matrix <- cor(stock_data_wide[, -1], use="complete.obs")
# 可视化相关性矩阵
heatmap(corr_matrix, main="Stock Price Correlation Between Companies", Colv=NA, Rowv=NA)
print(corr_matrix)
